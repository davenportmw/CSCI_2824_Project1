#! /usr/bin/env python

# Matthew Davenport, CSCI 2824, 6/22/17
# Project One - 3SAT generator

# libraries
import random # for random number generation
import math   # for taking absolute values of numbers

### functions ###


# function that will generate a random list of 3 unique integers between 1 and 10. Every element in that list is then used to create a new list with either positive or negative versions of the elements from the original list #
def genClause(vNum):
    sample = random.sample((range(1, vNum)), 3)
    clause = []
    for i in sample:
        y = -i
        z = random.choice((y, i))
        clause.append(z)
    return clause

# function that creates a list of lists. Each sublist will contain a clause generated by the genClause function #
def makeListOfInts(cNum, vNum):
    lists = []
    for i in range(cNum):
        lists.append(genClause(vNum))
    return lists

# function that takes the list of lists of ints, and uses it to make a list of lists of strs #
def makeListOfStrs(lists1):
    lists2 = []
    for i in lists1:
        list = []
        for j in i:
            if j < 0:
                h = "~" + "x" + str(abs(j))
                list.append(h)
            if j > 0:
                h = "x" + str(j)
                list.append(h)
        lists2.append(list)
    return lists2

# function that prints the entire list of lists in correct propositional syntax #
def printListOfLists(prop):
    r = ""
    for i in prop:
        r = r + "(" + 'v'.join(i) + ") ^ "
    r = r.replace("v", " v ", 100)
    r = r[:-2]
    return r

# function that prints the failed clause if there was one returned from the satVerify function #
def printFailedClause(list):
    clause = []
    for i in list:
        if i < 0:
            h = "~x" + str(abs(i))
        if i > 0:
            h = "x" + str(i)
        clause.append(h)
    r = "(" + 'v'.join(clause) + ")"
    r = r.replace("v", " v ", 100)
    return r

# function that will create a dictionary with keys for the variables, and values of the user defined inputs for those values #
def userInputs(list):
    choice = "t"
    trueFalseValues = {}
    uniques = set()
    for i in list:
        for j in i:
            uniques.add(abs(j))
    for k in sorted(uniques):
        choice = raw_input("Please enter a value (T/F) for variable x" + str(k) + ":")
        while (choice != "t" and choice != "f" and choice != "T" and choice != "F"):
            choice = raw_input("Please enter a value (T/F) for variable x" + str(k) + ":")
        if ( choice == "t" or choice == "T"):
            trueFalseValues[k] = 1
        else:
            trueFalseValues[k] = 0
    return trueFalseValues

## function that when given a proposition (which is represented by a list that contains sublists) and a dictionary that contains the variables and the user inputed 0/1 values, will verify all the 0/1 values for the user inputed variables in a clause, if the clause has no true values in it, then that clause will be displayed to the user as the reason the proposition was false. ##
def satVerify(list, dict):
    for i in list:
        true = 0
        compareList = []
        for j in i:
            if j < 0:
                if dict[abs(j)] == 0:
                    a = 1
                if dict[abs(j)] == 1:
                    a = 0
            if j > 0:
                a = dict[j]
            compareList.append(a)
        for k in compareList:
            if k == 1:
                true = 1
        if true == 0:
            print "This assignment is false, due to the clause:"
            return i
    print "This assignement is correct!"
    return None


# main function of program
def main():
    a = random.randint(1, 10)
    b = random.randint(3, 10)
    propopsition = makeListOfInts(a, b)
    str_proposition = makeListOfStrs(propopsition)
    print printListOfLists(str_proposition)
    inputs = userInputs(propopsition)
    SAT = satVerify(propopsition, inputs)
    if SAT != None:
        print printFailedClause(SAT)


if __name__ == '__main__':
    main();
